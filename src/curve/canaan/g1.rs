use crate::curve::canaan::{Fq, Fr};
use ark_ec::{models::CurveConfig, short_weierstrass::*};
use ark_ff::{Field, MontFp};

pub type G1Affine = Affine<Parameters>;
pub type G1Projective = Projective<Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl CurveConfig for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;

    /// COFACTOR = 1
    const COFACTOR: &'static [u64] = &[0x1];

    /// COFACTOR_INV = COFACTOR^{-1} mod r = 1
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = Fr::ONE;
}

impl SWCurveConfig for Parameters {
    /// COEFF_A = 5535550953020464033774697179068783537293233400326936244723618588471535946749
    const COEFF_A: Fq =
        MontFp!("5535550953020464033774697179068783537293233400326936244723618588471535946749");

    /// COEFF_B = 36647759370566527599092766378540222398030651415577287046115147687263277949759
    const COEFF_B: Fq =
        MontFp!("36647759370566527599092766378540222398030651415577287046115147687263277949759");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const GENERATOR: G1Affine = Affine::new_unchecked(G_GENERATOR_X, G_GENERATOR_Y);
}

/// G_GENERATOR_X = 112705626237469359431210032935145282355350935647148544791154076438707398138640
pub const G_GENERATOR_X: Fq =
    MontFp!("112705626237469359431210032935145282355350935647148544791154076438707398138640");

/// G_GENERATOR_Y = 89549966215394383044207691912783583524034482147603090211899998092343754082310
pub const G_GENERATOR_Y: Fq =
    MontFp!("89549966215394383044207691912783583524034482147603090211899998092343754082310");
